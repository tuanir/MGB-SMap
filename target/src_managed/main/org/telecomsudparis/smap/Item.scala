// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package org.telecomsudparis.smap

import scala.collection.JavaConverters._

@SerialVersionUID(0L)
final case class Item(
    key: String = "",
    fields: _root_.scala.collection.Seq[org.telecomsudparis.smap.Field] = _root_.scala.collection.Seq.empty
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[Item] with com.trueaccord.lenses.Updatable[Item] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      if (key != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, key) }
      fields.foreach(fields => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(fields.serializedSize) + fields.serializedSize)
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      {
        val __v = key
        if (__v != "") {
          _output__.writeString(1, __v)
        }
      };
      fields.foreach { __v =>
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.telecomsudparis.smap.Item = {
      var __key = this.key
      val __fields = (_root_.scala.collection.immutable.Vector.newBuilder[org.telecomsudparis.smap.Field] ++= this.fields)
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __key = _input__.readString()
          case 18 =>
            __fields += _root_.com.trueaccord.scalapb.LiteParser.readMessage(_input__, org.telecomsudparis.smap.Field.defaultInstance)
          case tag => _input__.skipField(tag)
        }
      }
      org.telecomsudparis.smap.Item(
          key = __key,
          fields = __fields.result()
      )
    }
    def withKey(__v: String): Item = copy(key = __v)
    def clearFields = copy(fields = _root_.scala.collection.Seq.empty)
    def addFields(__vs: org.telecomsudparis.smap.Field*): Item = addAllFields(__vs)
    def addAllFields(__vs: TraversableOnce[org.telecomsudparis.smap.Field]): Item = copy(fields = fields ++ __vs)
    def withFields(__v: _root_.scala.collection.Seq[org.telecomsudparis.smap.Field]): Item = copy(fields = __v)
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = key
          if (__t != "") __t else null
        }
        case 2 => fields
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(key)
        case 2 => _root_.scalapb.descriptors.PRepeated(fields.map(_.toPMessage)(_root_.scala.collection.breakOut))
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = org.telecomsudparis.smap.Item
}

object Item extends com.trueaccord.scalapb.GeneratedMessageCompanion[org.telecomsudparis.smap.Item] with com.trueaccord.scalapb.JavaProtoSupport[org.telecomsudparis.smap.Item, pb.Smap.Item] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[org.telecomsudparis.smap.Item] with com.trueaccord.scalapb.JavaProtoSupport[org.telecomsudparis.smap.Item, pb.Smap.Item] = this
  def toJavaProto(scalaPbSource: org.telecomsudparis.smap.Item): pb.Smap.Item = {
    val javaPbOut = pb.Smap.Item.newBuilder
    javaPbOut.setKey(scalaPbSource.key)
    javaPbOut.addAllFields(scalaPbSource.fields.map(org.telecomsudparis.smap.Field.toJavaProto)(_root_.scala.collection.breakOut).asJava)
    javaPbOut.build
  }
  def fromJavaProto(javaPbSource: pb.Smap.Item): org.telecomsudparis.smap.Item = org.telecomsudparis.smap.Item(
    key = javaPbSource.getKey,
    fields = javaPbSource.getFieldsList.asScala.map(org.telecomsudparis.smap.Field.fromJavaProto)(_root_.scala.collection.breakOut)
  )
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.telecomsudparis.smap.Item = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    org.telecomsudparis.smap.Item(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[String],
      __fieldsMap.getOrElse(__fields.get(1), Nil).asInstanceOf[_root_.scala.collection.Seq[org.telecomsudparis.smap.Field]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[org.telecomsudparis.smap.Item] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      org.telecomsudparis.smap.Item(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.collection.Seq[org.telecomsudparis.smap.Field]]).getOrElse(_root_.scala.collection.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SmapProto.javaDescriptor.getMessageTypes.get(2)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SmapProto.scalaDescriptor.messages(2)
  def messageCompanionForFieldNumber(__number: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = org.telecomsudparis.smap.Field
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = org.telecomsudparis.smap.Item(
  )
  implicit class ItemLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, org.telecomsudparis.smap.Item]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, org.telecomsudparis.smap.Item](_l) {
    def key: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.key)((c_, f_) => c_.copy(key = f_))
    def fields: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.scala.collection.Seq[org.telecomsudparis.smap.Field]] = field(_.fields)((c_, f_) => c_.copy(fields = f_))
  }
  final val KEY_FIELD_NUMBER = 1
  final val FIELDS_FIELD_NUMBER = 2
}
