// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package org.telecomsudparis.smap



@SerialVersionUID(0L)
final case class MapCommand(
    uuid: String = "",
    key: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY,
    data: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY,
    pure: Boolean = false,
    sender: String = ""
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[MapCommand] with com.trueaccord.lenses.Updatable[MapCommand] {
    @transient
    private[this] var __serializedSizeCachedValue: Int = 0
    private[this] def __computeSerializedValue(): Int = {
      var __size = 0
      if (uuid != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, uuid) }
      if (key != _root_.com.google.protobuf.ByteString.EMPTY) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(2, key) }
      if (data != _root_.com.google.protobuf.ByteString.EMPTY) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(3, data) }
      if (pure != false) { __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(4, pure) }
      if (sender != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, sender) }
      __size
    }
    final override def serializedSize: Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): Unit = {
      {
        val __v = uuid
        if (__v != "") {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = key
        if (__v != _root_.com.google.protobuf.ByteString.EMPTY) {
          _output__.writeBytes(2, __v)
        }
      };
      {
        val __v = data
        if (__v != _root_.com.google.protobuf.ByteString.EMPTY) {
          _output__.writeBytes(3, __v)
        }
      };
      {
        val __v = pure
        if (__v != false) {
          _output__.writeBool(4, __v)
        }
      };
      {
        val __v = sender
        if (__v != "") {
          _output__.writeString(5, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): org.telecomsudparis.smap.MapCommand = {
      var __uuid = this.uuid
      var __key = this.key
      var __data = this.data
      var __pure = this.pure
      var __sender = this.sender
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __uuid = _input__.readString()
          case 18 =>
            __key = _input__.readBytes()
          case 26 =>
            __data = _input__.readBytes()
          case 32 =>
            __pure = _input__.readBool()
          case 42 =>
            __sender = _input__.readString()
          case tag => _input__.skipField(tag)
        }
      }
      org.telecomsudparis.smap.MapCommand(
          uuid = __uuid,
          key = __key,
          data = __data,
          pure = __pure,
          sender = __sender
      )
    }
    def withUuid(__v: String): MapCommand = copy(uuid = __v)
    def withKey(__v: _root_.com.google.protobuf.ByteString): MapCommand = copy(key = __v)
    def withData(__v: _root_.com.google.protobuf.ByteString): MapCommand = copy(data = __v)
    def withPure(__v: Boolean): MapCommand = copy(pure = __v)
    def withSender(__v: String): MapCommand = copy(sender = __v)
    def getFieldByNumber(__fieldNumber: Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = uuid
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = key
          if (__t != _root_.com.google.protobuf.ByteString.EMPTY) __t else null
        }
        case 3 => {
          val __t = data
          if (__t != _root_.com.google.protobuf.ByteString.EMPTY) __t else null
        }
        case 4 => {
          val __t = pure
          if (__t != false) __t else null
        }
        case 5 => {
          val __t = sender
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(uuid)
        case 2 => _root_.scalapb.descriptors.PByteString(key)
        case 3 => _root_.scalapb.descriptors.PByteString(data)
        case 4 => _root_.scalapb.descriptors.PBoolean(pure)
        case 5 => _root_.scalapb.descriptors.PString(sender)
      }
    }
    override def toString: String = _root_.com.trueaccord.scalapb.TextFormat.printToUnicodeString(this)
    def companion = org.telecomsudparis.smap.MapCommand
}

object MapCommand extends com.trueaccord.scalapb.GeneratedMessageCompanion[org.telecomsudparis.smap.MapCommand] with com.trueaccord.scalapb.JavaProtoSupport[org.telecomsudparis.smap.MapCommand, pb.Smap.MapCommand] {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[org.telecomsudparis.smap.MapCommand] with com.trueaccord.scalapb.JavaProtoSupport[org.telecomsudparis.smap.MapCommand, pb.Smap.MapCommand] = this
  def toJavaProto(scalaPbSource: org.telecomsudparis.smap.MapCommand): pb.Smap.MapCommand = {
    val javaPbOut = pb.Smap.MapCommand.newBuilder
    javaPbOut.setUuid(scalaPbSource.uuid)
    javaPbOut.setKey(scalaPbSource.key)
    javaPbOut.setData(scalaPbSource.data)
    javaPbOut.setPure(scalaPbSource.pure)
    javaPbOut.setSender(scalaPbSource.sender)
    javaPbOut.build
  }
  def fromJavaProto(javaPbSource: pb.Smap.MapCommand): org.telecomsudparis.smap.MapCommand = org.telecomsudparis.smap.MapCommand(
    uuid = javaPbSource.getUuid,
    key = javaPbSource.getKey,
    data = javaPbSource.getData,
    pure = javaPbSource.getPure.booleanValue,
    sender = javaPbSource.getSender
  )
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): org.telecomsudparis.smap.MapCommand = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    org.telecomsudparis.smap.MapCommand(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[String],
      __fieldsMap.getOrElse(__fields.get(1), _root_.com.google.protobuf.ByteString.EMPTY).asInstanceOf[_root_.com.google.protobuf.ByteString],
      __fieldsMap.getOrElse(__fields.get(2), _root_.com.google.protobuf.ByteString.EMPTY).asInstanceOf[_root_.com.google.protobuf.ByteString],
      __fieldsMap.getOrElse(__fields.get(3), false).asInstanceOf[Boolean],
      __fieldsMap.getOrElse(__fields.get(4), "").asInstanceOf[String]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[org.telecomsudparis.smap.MapCommand] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      org.telecomsudparis.smap.MapCommand(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.com.google.protobuf.ByteString]).getOrElse(_root_.com.google.protobuf.ByteString.EMPTY),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.com.google.protobuf.ByteString]).getOrElse(_root_.com.google.protobuf.ByteString.EMPTY),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[Boolean]).getOrElse(false),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SmapProto.javaDescriptor.getMessageTypes.get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SmapProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: Int): _root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.com.trueaccord.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: Int): _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = org.telecomsudparis.smap.MapCommand(
  )
  sealed trait OperationType extends _root_.com.trueaccord.scalapb.GeneratedEnum {
    type EnumType = OperationType
    def isInsert: Boolean = false
    def isGet: Boolean = false
    def isUpdate: Boolean = false
    def isDelete: Boolean = false
    def isScan: Boolean = false
    def companion: _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[OperationType] = org.telecomsudparis.smap.MapCommand.OperationType
  }
  
  object OperationType extends _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[OperationType] {
    implicit def enumCompanion: _root_.com.trueaccord.scalapb.GeneratedEnumCompanion[OperationType] = this
    @SerialVersionUID(0L)
    case object INSERT extends OperationType {
      val value = 0
      val index = 0
      val name = "INSERT"
      override def isInsert: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object GET extends OperationType {
      val value = 1
      val index = 1
      val name = "GET"
      override def isGet: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object UPDATE extends OperationType {
      val value = 2
      val index = 2
      val name = "UPDATE"
      override def isUpdate: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object DELETE extends OperationType {
      val value = 3
      val index = 3
      val name = "DELETE"
      override def isDelete: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object SCAN extends OperationType {
      val value = 4
      val index = 4
      val name = "SCAN"
      override def isScan: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case class Unrecognized(value: Int) extends OperationType with _root_.com.trueaccord.scalapb.UnrecognizedEnum
    
    lazy val values = scala.collection.Seq(INSERT, GET, UPDATE, DELETE, SCAN)
    def fromValue(value: Int): OperationType = value match {
      case 0 => INSERT
      case 1 => GET
      case 2 => UPDATE
      case 3 => DELETE
      case 4 => SCAN
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = org.telecomsudparis.smap.MapCommand.javaDescriptor.getEnumTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = org.telecomsudparis.smap.MapCommand.scalaDescriptor.enums(0)
    def fromJavaValue(pbJavaSource: pb.Smap.MapCommand.OperationType): OperationType = fromValue(pbJavaSource.getNumber)
    def toJavaValue(pbScalaSource: OperationType): pb.Smap.MapCommand.OperationType = pb.Smap.MapCommand.OperationType.forNumber(pbScalaSource.value)
  }
  implicit class MapCommandLens[UpperPB](_l: _root_.com.trueaccord.lenses.Lens[UpperPB, org.telecomsudparis.smap.MapCommand]) extends _root_.com.trueaccord.lenses.ObjectLens[UpperPB, org.telecomsudparis.smap.MapCommand](_l) {
    def uuid: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.uuid)((c_, f_) => c_.copy(uuid = f_))
    def key: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.key)((c_, f_) => c_.copy(key = f_))
    def data: _root_.com.trueaccord.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.data)((c_, f_) => c_.copy(data = f_))
    def pure: _root_.com.trueaccord.lenses.Lens[UpperPB, Boolean] = field(_.pure)((c_, f_) => c_.copy(pure = f_))
    def sender: _root_.com.trueaccord.lenses.Lens[UpperPB, String] = field(_.sender)((c_, f_) => c_.copy(sender = f_))
  }
  final val UUID_FIELD_NUMBER = 1
  final val KEY_FIELD_NUMBER = 2
  final val DATA_FIELD_NUMBER = 3
  final val PURE_FIELD_NUMBER = 4
  final val SENDER_FIELD_NUMBER = 5
}
